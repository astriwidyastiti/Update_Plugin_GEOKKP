# -*- coding: utf-8 -*-
"""
/***************************************************************************
 testDialog
                                 A QGIS plugin
 added feature
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-01-25
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Astri Widyastiti
        email                : astriwidyastiti@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import QgsProject,  QgsVectorLayer
import psycopg2
import json






# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), '../ui/test_tenaga_ahli_dialog_base.ui'))


class testDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(testDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.pbLayar.clicked.connect(self.pbLayarclick)
        self.pbUnggah.clicked.connect(self.uploadToPostgreSQL)
    
    def populateComboBox(self):
        active_layers = QgsProject.instance().layerTreeRoot().layerOrder()

        for layer in active_layers:
            self.list_Box.addItem(layer.name())

    def pbLayarclick(self):
        self.list_Box.clear()
        self.populateComboBox()

    def uploadToPostgreSQL(self):
        selected_layer_name = self.list_Box.currentText()

        selected_layer = QgsProject.instance().mapLayersByName(selected_layer_name)[0]

        if isinstance(selected_layer, QgsVectorLayer):
            host = 'localhost'
            port = '5432'
            dbname = 'qgis'
            user = 'postgres'
            password = 'postgres'

            conn_string = f"dbname='{dbname}' user='{user}' host='{host}' port='{port}' password='{password}'"

            conn = psycopg2.connect(conn_string)

            cur = conn.cursor()

            layer_data = self.get_layer_data(selected_layer)
            geometry_type = selected_layer.geometryType()
            srid = selected_layer.crs().postgisSrid()

            self.insert_data_to_postgresql(cur, layer_data) 

            conn.commit()

            cur.close()
            conn.close()

            print(f'Layer {selected_layer_name} berhasil diunggah ke PostgreSQL.')
        else:
            print(f'Layer yang dipilih ({selected_layer_name}) bukan layer vektor.')

    def get_layer_data(self, layer):
        features = []

        for feature in layer.getFeatures():
            if feature.geometry():
                geometry = json.loads(feature.geometry().asJson())
                properties = {}

                for field in feature.fields():
                    if field.name() != 'geometry':
                        properties[field.name()] = feature[field.name()]

                features.append({
                    'type': 'Feature',
                    'geometry': geometry,
                    'properties': properties
                })

        geojson_data = {
            'type': 'FeatureCollection',
            'features': features
        }

        return geojson_data
    

    def insert_data_to_postgresql(self, cursor, data):
        try:
            for feature in data['features']:
                geometry = json.dumps(feature['geometry'])  
                properties = feature['properties']

                sql = f"INSERT INTO test (nama, geom) VALUES (%s, ST_GeomFromGeoJSON(%s))"  

                cursor.execute(sql, (properties['nama'], geometry))

            print("Data berhasil dimasukkan ke PostgreSQL.")
        except Exception as e:
            print("Gagal memasukkan data ke PostgreSQL:", str(e))       

 



      
